info:
    name: Base
    load: !!seq
        - "commands"
        - "variables"

data:
    commands:
        load:
            run: >
                try:
                    status = self.bot.loadyaml(args.split()[0])
                    if(status == 1): self.bot.send("PRIVMSG "+channel+" :File "+args.split()[0]+" not found")
                    if(status == 2): self.bot.send("PRIVMSG "+channel+" :Error")
                    if(status == 0):
                        self.bot.send("PRIVMSG "+channel+" :"+args.split()[0]+":"+self.bot.yaml.info["name"]+" loaded")
                except Exception as e:
                    print(e)
                    self.bot.send("PRIVMSG "+channel+" :YAML file failed to load")
            permission: admin.load
            description: Loads defined yaml file (file that contains the commands)
            syntax: <file_location:str>
            category: admin
        say:
            run: self.bot.send("PRIVMSG "+channel+" :"+" "+args)
            permission: general.echo
            description: just echo
            syntax: <text:str>...
            category: general
        perm:
            run: >
                    try:
                        if args != "":
                            argsx = args.split()
                            if len(argsx) == 3:                                    
                                if not self.permCheck(hostn,args[2]):
                                    self.bot.sendNotice(nickn,"You do not have required permissions to grant permission node: "+argsx[2])
                                if (argsx[1] == "grant"):
                                    if not argsx[2] in self.bot.data["userdata"][argsx[0]]["permissions"]:
                                        self.bot.data["userdata"][argsx[0]]["permissions"].insert(0,argsx[2])
                                        self.bot.sendNotice(nickn,"added permission node: "+argsx[2]+" to user: "+argsx[0])
                                    else:
                                        self.bot.sendNotice(nickn,"user "+argsx[0]+" already has permission node: "+argsx[2])
                                elif (argsx[1] == "deny"):
                                    if not "-"+argsx[2] in self.bot.data["userdata"][argsx[0]]["permissions"]:
                                        self.bot.data["userdata"][argsx[0]]["permissions"].insert(0,"-"+argsx[2])
                                        self.bot.sendNotice(nickn,"denied permission node: "+argsx[2]+" from user: "+argsx[0])
                                    else:
                                        self.bot.sendNotice(nickn,"user "+argsx[0]+" already has denied permission node: "+argsx[2])
                                elif argsx[1] == "revoke":
                                    if argsx[2] in self.bot.data["userdata"][argsx[0]]["permissions"]:
                                        self.bot.data["userdata"][argsx[0]]["permissions"].remove(argsx[2])
                                        self.bot.sendNotice(nickn,"removed permission node: "+argsx[2]+" from user: "+argsx[0])
                                    else:
                                        self.bot.sendNotice(nickn,"user "+argsx[0]+" does not have permission node: "+argsx[2])
                            if (argsx[1] == "reset" and len(argsx) == 2 and self.permCheck(hostn,resetPerm)):
                                self.bot.sendNotice(nickn,"reset user "+argsx[0]+"'s permission nodes.")
                    except Exception as e:
                        self.bot.send("PRIVMSG "+channel+" :error "+str(e))
            permission: owner.perm
            description: change permissions
            syntax: <userhost:str> grant/revoke/deny <permission_node:str>%<userhost:str> reset
            category: admin
        help:
            run: >
              try:
                import time
                if(args != ""):
                    categories = []
                    for com in self.bot.data["commands"].keys():
                        if "category" in self.bot.data["commands"][com]:
                            if not (self.bot.data["commands"][com]["category"] in categories):
                                categories.append(self.bot.data["commands"][com]["category"])
                        else:
                            if not "None" in categories:
                                categories.append("None")
                    if(args.split()[0] in categories):
                        com = []
                        for x in self.bot.data["commands"].keys():
                            if(args.split()[0] == self.bot.data["commands"][x]["category"]):
                                com.append(x)
                        self.bot.send("PRIVMSG "+channel+" :Commands in category '" + args.split()[0]+"':")
                        self.bot.send("PRIVMSG "+channel+" :"+" ".join(com))
                    elif(args.split()[0] in self.bot.data["commands"]): 
                        self.bot.send("PRIVMSG "+channel+" :Information about command '"+args.split()[0]+"':")
                        if("syntax" in self.bot.data["commands"][args.split()[0]].keys()):
                            if(self.bot.data["commands"][args.split()[0]]["syntax"] != None):
                                self.bot.send("PRIVMSG "+channel+" :Syntax: "+str(self.bot.data["commands"][args.split()[0]]["syntax"]))
                            else:
                                self.bot.send("PRIVMSG "+channel+" :Syntax: Not defined")
                        else:
                            self.bot.send("PRIVMSG "+channel+" :Syntax: Not defined")
                        if("description" in self.bot.data["commands"][args.split()[0]].keys()):
                            if(self.bot.data["commands"][args.split()[0]]["description"] != None):
                                self.bot.send("PRIVMSG "+channel+" :Description: "+str(self.bot.data["commands"][args.split()[0]]["description"]))
                            else:
                                self.bot.send("PRIVMSG "+channel+" :Description: Not defined")
                        else:
                            self.bot.send("PRIVMSG "+channel+" :Description: Not defined")    
                    elif( not args.split()[0] in self.bot.data["commands"]): 
                        self.bot.send("PRIVMSG "+channel+" :No such a command or category: '"+args.split()[0]+"'")
                else:        
                    categories = []
                    self.bot.send("PRIVMSG "+channel+" :Categories:")
                    for com in self.bot.data["commands"].keys():
                        if "category" in self.bot.data["commands"][com]:
                            if not (self.bot.data["commands"][com]["category"] in categories):
                                categories.append(self.bot.data["commands"][com]["category"])
                        else:
                            if not "None" in categories:
                                categories.append("None")
                    self.bot.send("PRIVMSG "+channel+" :"+" ".join(categories))
              except Exception as e:
                print(str(e))
            permission: general.help
            description: Help command
            syntax: "[category:str/command:str]"
            category: general
        eval:
            run: >
                try:
                    self.bot.send("PRIVMSG "+channel+" :"+str(eval(args)))
                except Exception as e:
                    self.bot.send("PRIVMSG "+channel+" :"+str(e))
            permission: owner.eval
            description: Evaluate command
            syntax: <string:str>
            category: owner
        kill:
            run: >
                try:
                    import sys
                    self.bot.send("PRIVMSG "+channel+" :DED")
                    sys.exit()
                except Exception as e:
                    print(e)
            permission: "owner.kill"
            description: kill the bot
            category: owner
        kick:
            run: >
                self.bot.send("KICK "+args.split()[0])
            permission: admin.kick
            description: kick
            category: admin
        permTest:
            run: >
                self.bot.send("PRIVMSG "+channel+" :yes")
            description: permission test
            category: perm
        join:
            run: >
                self.bot.send("JOIN "+args.split()[0])
            permission: admin.join
            description: Join channel, requires argument
            category: admin
        leave:
            run: >
                self.bot.send("PART "+args.split()[0])
            permission: admin.leave
            description: Leave channel, requires argument
            category: admin
        raw:
            run: >
                self.bot.send(args)
            permission: owner.raw
            syntax: <string:str>
            description: raw IRC command
            category: owner
        about:
            run: >
                self.bot.sendNotice(nickn,"to be written")
            permission: general.about
            description: info about the bot
            category: general
        whois:
            run: >
                try:
                    self.bot.sendNotice(nickn,"NYI")
                    if args == "":
                        localusr = hostn
                    else:
                        localusr = args.split()[0]
                    if localusr in self.bot.data["userdata"].keys():
                        if "permissions" in self.bot.data["userdata"][localusr].keys():
                            perms = ", "
                            perms = perms.join(self.bot.data["userdata"][localusr]["permissions"])
                            self.bot.sendPrivmsg(channel,"User "+localusr+" has perms:")
                            self.bot.sendPrivmsg(channel,perms)
                except Exception as e:
                    print(e)
            permission: general.whois
            description: who is [user]
            syntax: "[hostname:str]"
            category: general
        list:
            run: >
                self.bot.sendNotice(nickn,"use \"help\" command")
            permission: general.list
            description: use help command
            category: general
    userdata:
        unaffiliated/tceo:
            permissions: !!seq
                - "*"
        unaffiliated/gustavo6046: 
            permissions: !!seq
                - "-owner.*"
                - "*"
        c.handicraftsman.tk: 
            permissions: !!seq
                - "-owner.*"
                - "*"
    variables:
        default-permission-nodes:
            - "general"
            - "perm.permTest"
